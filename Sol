pragma solidity ^0.5.13;

contract notify {
 mapping(address => address) notifications;
 function msg(address target, string notification) public {
   notifications[msg.sender] = new msg(target, notification);
}

 contract msg{
    // Get the total token supply
    function totalSupply() public view returns (uint256);
 
    // Get the account balance of another account with address _owner
    function balanceOf(address _owner) public view returns (uint256 balance);
 
    // Send _value amount of tokens to address _to
    function transfer(address _to, uint256 _value) public returns (bool success);
 
    // Send _value amount of tokens from address _from to address _to
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
 
    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
    // If this function is called again it overwrites the current allowance with _value.
    // this function is required for some DEX functionality
    function approve(address _spender, uint256 _value) public returns (bool success);
 
    // Returns the amount which _spender is still allowed to withdraw from _owner
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
 
    // Triggered when tokens are transferred.
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
 
    // Triggered whenever approve(address _spender, uint256 _value) is called.
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    string public constant symbol = "Notify";
    string public constant name = notification;
    uint8 public constant decimals = 0;
    uint256 totalSupply = 1;
    
    // Owner of this contract
    address public owner;
 
    // Balances for each account
    mapping(address => uint256) balances;
 
    // Owner of account approves the transfer of an amount to another account
    mapping(address => mapping (address => uint256)) allowed;
 
    // Functions with this modifier can only be executed by the owner
    modifier onlyOwner() {
        require(msg.sender == owner);
    }
 
    // Constructor
    constructor(address target) public {
        owner = target;
        balances[owner] = _totalSupply;
emit Transfer(address(0), target, 1);
    }
 
    function totalSupply() public view returns (uint256 total) {
        total = _totalSupply;
    }
 
    // What is the balance of a particular account?
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
 
    // Transfer the balance from owner's account to another account
    function transfer(address _to, uint256 _amount) public returns (bool success) {
            balances[msg.sender] -= _amount;
            emit Transfer(msg.sender, msg.sender, _amount);

;

    }
}
